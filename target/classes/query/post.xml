<?xml version="1.0" encoding="euc-kr"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="p">

    <!-- 게시판 등록  -->
    <insert id="save_post" parameterType="post" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO
            post
        (
          title
        , content
        , file_path
        , created_date
        , creator
        , modified_date
        , modifier
        , views
        , category
        )

        VALUES(
                  #{title}
              , #{content}
              , #{filePath}
              , datetime('now', 'localtime')
              , #{creator}
              , datetime('now', 'localtime')
              , #{modifier}
              , 0
              , #{category}
              )
    </insert>

    <!-- 첨부파일 저장  -->
    <insert id="save_file" parameterType="file" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO
            attachment_file
        (
            post_number
        , uuid_name
        , file_name
        , created_date
        , creator
        , modified_date
        , modifier
        )

        VALUES(
                  #{postNumber}
              , #{uuidName}
              , #{fileName}
              , datetime('now', 'localtime')
              , #{creator}
              , datetime('now', 'localtime')
              , #{modifier}
              )
    </insert>

    <!-- 첨부파일 조회-->
 <select id="get_file" parameterType="int" resultType="file">
     SELECT id
          , post_number as postNumber
          , uuid_name as uuidName
          , file_name as fileName
          , created_date as createdDate
          , creator
          , modified_date as modifiedDate
          , modifier

     FROM attachment_file WHERE post_number=#{id}
 </select>

    <!-- 게시글 하나 조회-->
    <select id="selectById" parameterType="int" resultType="post">
        SELECT id
               , title
               , content
               , file_path as filePath
               , strftime('%Y-%m-%d %H:%M',created_date) as createdDate
               , creator
               , strftime('%Y-%m-%d %H:%M',modified_date) as modifiedDate
               , modifier
               , views
               , category
        FROM post WHERE id=#{id}
    </select>

    <!-- 게시글 전체 조회-->
    <select id="selectList" resultType="post">
        SELECT post.id
               , post.title
               , post.content
               , post.file_path as filePath
               , strftime('%Y-%m-%d %H:%M', post.created_date) as createdDate
               , post.creator
               , strftime('%Y-%m-%d %H:%M', post.modified_date) as modifiedDate
               , post.modifier
               , post.views
               , post.category
         FROM post
        JOIN category on post.category = category.id
        WHERE category.is_use = 1
        order by category.orders ASC, post.id ASC
    </select>

    <!-- post_hashtag(중간다리) 저장 -->
    <insert id="save_post_hashtag" parameterType="postHashTag" useGeneratedKeys="true" keyProperty="hashtag_id">
        INSERT INTO
            post_hashtag
        (
            post_id
        )

        VALUES(
                    #{post_id}
              )
    </insert>

    <!-- 해시태그 저장 -->
    <insert id="save_hashtag" parameterType="HashTag" useGeneratedKeys="true" keyProperty="hashtag_id">
        INSERT INTO
            hashtag
        (
            hashtag_id,
            hashtag_cont
        )

        VALUES(
                #{id},
                #{content}
              )
    </insert>

    <!-- 해시태그 조회 -->
    <select id="get_hashtag" parameterType="int" resultType="HashTag">
        SELECT hashtag.hashtag_cont as content
        FROM post_hashtag
        JOIN hashtag
        ON post_hashtag.hashtag_id = hashtag.hashtag_id
        WHERE post_id = #{post_id}
    </select>

    <!-- 조회수 업데이트-->
    <update id="update_views" parameterType="int">
        UPDATE post SET
        views = views + 1
        WHERE id = #{id}
    </update>

    <!-- 카테고리 등록-->
    <insert id="save_category" parameterType="Category">
        INSERT INTO
            category
        (
         category_name,
         is_use,
         orders
        )

        VALUES(
               #{categoryName},
               #{isUse},
               #{orders}
              )
    </insert>

    <!-- 카테고리 한개조회-->
    <select id="get_category" parameterType="Long" resultType="Category">
         SELECT id,
                category_name as categoryName,
                is_use as isUse,
                orders
        FROM category
        WHERE id = #{category_id}
    </select>

    <!-- 카테고리 전부조회-->
    <select id="get_all_category" resultType="Category">
        SELECT id,
               category_name as categoryName,
               is_use as isUse,
               orders
        FROM category
    </select>


    <!-- 카테고리 수정-->
    <update id="update_category" parameterType="com.hong.hakwon.web.dto.CategoryUpdateDto">
        UPDATE category set  category_name = #{categoryName} , is_use = #{isUse}, orders = #{order} WHERE id=#{id}
    </update>


    <!-- 카테고리 삭제-->
    <delete id="delete_category" parameterType="Long">
        DELETE FROM category WHERE id = #{id}
    </delete>

    <!-- 카테고리 삭제시 게시판 삭제-->
    <delete id="delete_refpost" parameterType="Long">
        DELETE FROM post WHERE category = #{id}
    </delete>

    <!-- 전체 게시판 수-->
    <select id="count_post" resultType="int">
        SELECT count(*) FROM post
        JOIN category on post.category = category.id
        WHERE category.is_use = 1
    </select>

    <!-- 게시판 with page-->
    <select id="get_post_with_page" parameterType="com.hong.hakwon.web.dto.PostPage" resultType="post">
        SELECT post.id
             , post.title
             , post.content
             , post.file_path as filePath
             , strftime('%Y-%m-%d %H:%M', post.created_date) as createdDate
             , post.creator
             , strftime('%Y-%m-%d %H:%M', post.modified_date) as modifiedDate
             , post.modifier
             , post.views
             , post.category
        FROM post
        JOIN category on post.category = category.id
        WHERE category.is_use = 1
        order by category.orders ASC, post.id ASC
        LIMIT #{start}, #{length}
    </select>

    <!-- 검색(제목, 작성자)-->
    <select id="search_post" parameterType="com.hong.hakwon.web.dto.SearchRequestDto" resultType="post">
        SELECT post.id
             , post.title
             , post.content
             , post.file_path as filePath
             , strftime('%Y-%m-%d %H:%M', post.created_date) as createdDate
             , post.creator
             , strftime('%Y-%m-%d %H:%M', post.modified_date) as modifiedDate
             , post.modifier
             , post.views
             , post.category
        FROM post
        JOIN category on post.category = category.id
        WHERE (post.title || post.creator)  like ("%" || #{data} || "%")
        and category.is_use = 1
        order by category.orders ASC, post.id ASC
        LIMIT #{start}, #{length}
    </select>

    <!-- 검색 카운트 수-->
    <select id="count_search" parameterType="String" resultType="int">
        SELECT count(*) FROM post
        JOIN category on post.category = category.id
        WHERE (post.title || post.creator)  like ("%" || #{data} || "%")
        and category.is_use = 1
    </select>

    <!-- 검색(by 태그)-->
    <select id="search_post_by_tag" parameterType="com.hong.hakwon.web.dto.SearchRequestDto" resultType="post">
        SELECT post.id
             , post.title
             , post.content
             , post.file_path as filePath
             , strftime('%Y-%m-%d %H:%M', post.created_date) as createdDate
             , post.creator
             , strftime('%Y-%m-%d %H:%M', post.modified_date) as modifiedDate
             , post.modifier
             , post.views
             , post.category
        FROM post
        JOIN category on post.category = category.id
        JOIN post_hashtag on post.id = post_hashtag.post_id
        JOIN hashtag on post_hashtag.hashtag_id = hashtag.hashtag_id
        WHERE hashtag.hashtag_cont like ("%" || #{data} || "%")
        and category.is_use = 1
        order by category.orders ASC, post.id ASC
        LIMIT #{start}, #{length}

    </select>

    <!-- 검색 카운트 수(by 태그)-->
    <select id="count_search_by_tag" parameterType="String" resultType="int">
        SELECT count(*) FROM post
        JOIN category on post.category = category.id
        JOIN post_hashtag on post.id = post_hashtag.post_id
        JOIN hashtag on post_hashtag.hashtag_id = hashtag.hashtag_id
        WHERE hashtag.hashtag_cont like ("%" || #{data} || "%")
        and category.is_use = 1
    </select>

    <!-- 계층형 카테고리 등록-->
    <insert id="save_Tcategory" parameterType="Tree">
        INSERT INTO
            tree
        (
         parent_id,
         lv,
         nm,
         reg_dttm,
         reg_id,
         mdfy_dttm,
         mdfy_id
        )

        VALUES(
               #{parent_id},
               ifnull((select distinct lv from tree where nm = #{parent_id}) + 1, 1),
               #{nm},
               date('now'),
               #{reg_id},
               date('now'),
               #{mdfy_id}
              )
    </insert>


    <!-- 계층형 카테고리 수정-->
    <update id="update_Tcategory" parameterType="com.hong.hakwon.web.dto.TCategoryUpdateDto">
        UPDATE tree
        set nm = #{post_nm}, mdfy_dttm = date('now'), mdfy_id = #{mdfy_id}
        WHERE nm = #{prev_nm}
    </update>

    <!-- 계층형 카테고리 자식수정-->
    <update id="update_child_Tcategory" parameterType="com.hong.hakwon.web.dto.TCategoryUpdateDto">
        UPDATE tree
        set parent_id = #{post_nm}
        WHERE parent_id = #{prev_nm};
    </update>

    <!-- 계층형 카테고리 삭제-->
    <delete id="delete_Tcategory" parameterType="java.util.List">
        DELETE FROM tree
        WHERE nm in
        <foreach collection="list" item="arr" open="(" close=")" separator=",">
            #{arr}
        </foreach>
    </delete>

    <!-- 계층형 카테고리 출력-->
    <select id="select_Tcategory" resultType="Tree">
        select
               seq,
               ifnull(parent_id, '#') as parent_id,
               lv,
               nm,
               reg_dttm,
               reg_id,
               mdfy_dttm,
               mdfy_id
        from tree
    </select>

    <!-- 계층형 카테고리 drag(drag한 node)-->
    <update id="drag_Tcategory" parameterType="com.hong.hakwon.web.dto.TCategoryDragDto">
        UPDATE tree
        set seq = ifnull((select a.seq-101 from tree as a where a.nm = #{n_node}), (select c.seq+1 from tree as c where c.nm = #{pr_node}))
            ,parent_id = #{p_node}
          ,lv = ifnull((select b.lv+1 from tree as b where b.nm = #{p_node}),1)
        WHERE nm = #{m_node}
    </update>

    <!-- 계층형 카테고리 drag(drag한 node 자식 lv차 set)-->
    <update id="drag_child_Tcategory1" parameterType="java.util.List">
        UPDATE tree as a
        set lv = (select a.lv-b.lv from tree as b where b.nm = a.parent_id)
        WHERE nm in
        <foreach collection="list" item="arr" open="(" close=")" separator=",">
            #{arr}
        </foreach>
    </update>

    <!-- 계층형 카테고리 drag(drag한 node 자식 lv차 + 바뀐lv)-->
    <update id="drag_child_Tcategory2" parameterType="java.util.List">
        UPDATE tree as a
        set lv = (select a.lv+b.lv from tree as b where b.nm = a.parent_id)
        WHERE nm in
        <foreach collection="list" item="arr" open="(" close=")" separator=",">
            #{arr}
        </foreach>
    </update>

    <!-- 이동시 seq++(n_node)-->
    <update id="Tcategory_nposition" parameterType="String">
        UPDATE tree
        set seq = seq + 100
        WHERE seq >= (select seq from tree where nm = #{n_node})
    </update>

    <!-- 이동시 seq++(pr_node)-->
    <update id="Tcategory_prposition" parameterType="String">
        UPDATE tree
        set seq = seq + 100
        WHERE seq > (select seq from tree where nm = #{pr_node})
    </update>

<!--    <select id="pr_seqs" parameterType="String" resultType="int">-->
<!--    select seq-->
<!--    from tree-->
<!--    where seq > (select seq from tree where nm = #{pr_node})-->
<!--    </select>-->

<!--    <select id="n_seqs" parameterType="String" resultType="int">-->
<!--        select seq-->
<!--        from tree-->
<!--        where seq >= (select seq from tree where nm = #{pr_node})-->
<!--    </select>-->
</mapper>